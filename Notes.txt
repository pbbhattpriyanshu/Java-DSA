// How is our code running 

 Compilation [ Source Code(.java) -> Compiler -> Byte code(.class) ] -> Execution [ Java Virtual machine(JVM) -> Native code ] 

// Basic Terms 

 ; -> Terminator, which is must to end the statement
 -> This is comment, which is not be included as code.

// Variable (Container)

 Primitive = simple value stored directly in memory (stack).
 for example - int, double, float, char, boolean.
 Referance = memory address (stack) that points to the (heap).
 for example - String, array, Object.

// Order of Operations
 [P-E-M-D-A-S] (priority, exponents, multiplication, divide, add, sub)

// printf() = is a method used to format output / series wise
 Format specifiers examples:

 %d for integers
 %f for floating-point numbers
 %s for strings
 example:
 
 int age = 25;
 System.out.printf("I am %d years old.", age);
 Output: I am 25 years old.

 printf() is useful for creating well-formatted and readable output.

// FOR EMOJI IN TERMINAL
 chcp 65001

// Method 
 a block of reusable code that is executed when called ().

// Overloaded methods 
 method that share the same name, but different parameters 
 signature = name + parameters

// Java Special Characters
 Because strings must be written within quotes, Java will misunderstand this string, and generate an error:

 String txt = "We are the so-called "Vikings" from the north.";
 
 The solution to avoid this problem, is to use the backslash escape character.

 The backslash (\) escape character turns special characters into string characters:

 Escape character
 \'	'	Single quote
 \"	"	Double quote
 \\	\	Backslash
 The sequence \"  inserts a double quote in a string:


 Example
 String txt = "We are the so-called \"Vikings\" from the north.";

 The sequence \'  inserts a single quote in a string:


 Example
 String txt = "It\'s alright.";

 The sequence \\  inserts a single backslash in a string:


 Example
 String txt = "The character \\ is called backslash.";

