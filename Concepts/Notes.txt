// How is our code running 

 Compilation [ Source Code(.java) -> Compiler -> Byte code(.class) ] -> Execution [ Java Virtual machine(JVM) -> Native code ] 

// Basic Terms 

 ; -> Terminator, which is must to end the statement
 -> This is comment, which is not be included as code.

// Variable (Container)

 Primitive = simple value stored directly in memory (stack).
 for example - int, double, float, char, boolean.
 Referance = memory address (stack) that points to the (heap).
 for example - String, array, Object.

// Order of Operations
 [P-E-M-D-A-S] (priority, exponents, multiplication, divide, add, sub)

// printf() = is a method used to format output / series wise
 Format specifiers examples:

 %d for integers
 %f for floating-point numbers
 %s for strings
 example:
 
 int age = 25;
 System.out.printf("I am %d years old.", age);
 Output: I am 25 years old.

 printf() is useful for creating well-formatted and readable output.

// FOR EMOJI IN TERMINAL
 chcp 65001

// Method 
 a block of reusable code that is executed when called ().

// Overloaded methods 
 method that share the same name, but different parameters 
 signature = name + parameters

// Java Special Characters
 Because strings must be written within quotes, Java will misunderstand this string, and generate an error:

 String txt = "We are the so-called "Vikings" from the north.";
 
 The solution to avoid this problem, is to use the backslash escape character.

 The backslash (\) escape character turns special characters into string characters:

 Escape character
 \'	'	Single quote
 \"	"	Double quote
 \\	\	Backslash
 The sequence \"  inserts a double quote in a string:


 Example
 String txt = "We are the so-called \"Vikings\" from the north.";

 The sequence \'  inserts a single quote in a string:


 Example
 String txt = "It\'s alright.";

 The sequence \\  inserts a single backslash in a string:


 Example
 String txt = "The character \\ is called backslash.";

// imp
 In Java, the return type of a function (method) is specified before the method name.

 Use void if the method does not return any value.
 Use a data type (like int, double, String, etc.) if the method returns a value of that type.

//type casting
 char --> int easily/
 int --> char complicated / sometimes work and sometimes did'nt work (force fully)

// ASCII value
| Uppercase | ASCII | Lowercase | ASCII |
| --------- | ----- | --------- | ----- |
| A         | 65    | a         | 97    |
| B         | 66    | b         | 98    |
| C         | 67    | c         | 99    |
| D         | 68    | d         | 100   |
| E         | 69    | e         | 101   |
| F         | 70    | f         | 102   |
| G         | 71    | g         | 103   |
| H         | 72    | h         | 104   |
| I         | 73    | i         | 105   |
| J         | 74    | j         | 106   |
| K         | 75    | k         | 107   |
| L         | 76    | l         | 108   |
| M         | 77    | m         | 109   |
| N         | 78    | n         | 110   |
| O         | 79    | o         | 111   |
| P         | 80    | p         | 112   |
| Q         | 81    | q         | 113   |
| R         | 82    | r         | 114   |
| S         | 83    | s         | 115   |
| T         | 84    | t         | 116   |
| U         | 85    | u         | 117   |
| V         | 86    | v         | 118   |
| W         | 87    | w         | 119   |
| X         | 88    | x         | 120   |
| Y         | 89    | y         | 121   |
| Z         | 90    | z         | 122   |


