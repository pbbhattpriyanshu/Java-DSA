// What's a data structure?

 Data structure: a named location that can be used to store and organize data.
 Example: array
 A collection of elements stored at contiguous memory locations.
 char[] array;
 ['H'],['E'],['L'],['L'],['O']

// What's an algorithm?

 Algorithm: a collection of steps to solve a problems.
 Example: Baking a pizza
 1. Heat the ovem to 550F
 2. Kneed the dough
 3. Add topings

// What is Stack?
 
 stack = LIFO data structured, Last-In First-Out
 stores objects into a sort of 'vertical tower'
 push() to add to the top
 pop() to remove from the top

// Uses of Stack?

 1. undo or redo features in text editor
 2. moving backward and forward through browser history
 3. backtracking algorithm (maze, file directories)
 4. Calling function (call stack)

// What is Queue?

 FIFO data structure, Firt-In First-Out (ex. A line of people)
 A collection designed for holding elements prior to processing Linear data structure.

 add = enqueue, offer()
 remove = dequeue, poll()

 where a queue is useful:

 Print Queue:
 Managing print jobs sent to a printer in the order they arrive.

 Task Scheduling:
 Handling tasks in operating systems, such as CPU scheduling and process management.

 Customer Service Systems:
 Managing people waiting in line (e.g., call centers, ticket counters).

 Breadth-First Search (BFS) in Graphs:
 Used in algorithms to traverse or search tree/graph data structures.

// What is Priority Queue?

 A FIFP data structure that serves elements with the highest priorities first before elements with lower Priority.

// ArrayList 

 Array                       ArrayList

 fixed size                  dynamic size

 primitive datatypes         primitive datatypes can't be stored directly.
 can be stored.
 
 // Operation
   Add element - name.add()
   Get element - name.get()
   Remove element - name.remove()
   Set element at index - name.set(index, "value" )
   Contains element -  name.contains("value")

   
 
